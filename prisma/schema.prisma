generator client {
  provider = "prisma-client-js"
  // output = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id String @default(cuid()) @id
  text String
  user User @relation("UserComments", fields: [userId], references: [id])
  userId String
  task Task @relation("TaskComments", fields: [taskId], references: [id])
  taskId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id String @default(cuid()) @id
  code String @unique
  from User @relation("UserSentInvites", fields: [fromId], references: [id])
  fromId String
  to User? @relation("UserReceivedInvites", fields: [toId], references: [id])
  toId String?
  email String?
  title String?
  text String?
  type InviteType
  typeId String
  expireAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InviteType {
  ORGANIZATION
}

model Label {
  id String @default(cuid()) @id
  text String @unique
  color String
  organization Organization @relation("OrganizationLabels", fields: [organizationId], references: [id])
  organizationId String
  tasks Task[] @relation("TaskLabels")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id String @default(cuid()) @id
  name String
  githubToken String?
  githubOrganization String?
  owner User @relation("UserOrganizations", fields: [ownerId], references: [id])
  ownerId String
  users User[] @relation("OrganizationUsers")
  tasks Task[] @relation("OrganizationTasks")
  teams Team[] @relation("OrganizationTeams")
  labels Label[] @relation("OrganizationLabels")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ResponseRequest {
  id String @default(cuid()) @id
  // taskCode: String!
  task Task @relation("TaskResponseRequests", fields: [taskId], references: [id])
  taskId String
  title String
  description String
  state Int?
  createdBy User @relation("UserResponseRequests", fields: [createdById], references: [id])
  createdById String
  assignedTo User @relation("UserAssignedResponseRequests", fields: [assignedToId], references: [id])
  assignedToId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id String @default(cuid()) @id
  code String? @unique
  title String
  description String?
  estimated Int @default(0)
  state Int? @default(value: 0)
  priority Int? @default(value: 0)
  snoozedUntil DateTime? @default(now())
  createdBy User @relation("TasksCreatedBy", fields: [createdById], references: [id])
  createdById String
  assignedTo User? @relation("TasksAssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?
  organization Organization? @relation("OrganizationTasks", fields: [organizationId], references: [id])
  organizationId String?
  comments Comment[] @relation("TaskComments")
  responseRequests ResponseRequest[] @relation("TaskResponseRequests")
  team Team? @relation("TeamTasks", fields: [teamId], references: [id])
  teamId String?
  labels Label[] @relation("TaskLabels")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id String @default(cuid()) @id
  name String
  users User[] @relation("UserTeams")
  tasks Task[] @relation("TeamTasks")
  organization Organization @relation("OrganizationTeams", fields: [organizationId], references: [id])
  organizationId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @default(cuid()) @id
  stripeId String @default("")
  stripeSubscriptionId String @default("")
  username String @unique
  firstName String
  lastName String?
  avatar String?
  biography String?
  email String @unique
  emailVerifiedAt DateTime?
  emailVerificationCode String?
  emailVerificationCodeIssuedAt DateTime?
  hash String
  resetPasswordCode String?
  resetPasswordCodeIssuedAt DateTime?
  ownOrganizations Organization[] @relation("UserOrganizations")
  organizations Organization[] @relation("OrganizationUsers")
  tasksCreated Task[] @relation("TasksCreatedBy")
  tasksAssigned Task[] @relation("TasksAssignedTo")
  teams Team[] @relation("UserTeams")
  sentInvites Invite[] @relation("UserSentInvites")
  receivedInvites Invite[] @relation("UserReceivedInvites")
  createdResponseRequest ResponseRequest[] @relation("UserResponseRequests")
  assignedResponseRequest ResponseRequest[] @relation("UserAssignedResponseRequests")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  }

enum PermissionEnum {
  DELETE
  READ
  UPDATE
  WRITE
}
